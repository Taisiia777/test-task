import { useState, useEffect } from 'react';
import TaskItem from './TaskItem';
import { Task } from '../types/Task';
import styles from './TaskList.module.css';

interface TaskListProps {
  tasks: Task[];
  onToggleStatus: (id: string, completed: boolean) => Promise<void>;
  onDeleteTask: (id: string) => Promise<void>;
  onCompleteAll?: () => Promise<void>;
}

type FilterType = 'all' | 'active' | 'completed';
type SortDirection = 'asc' | 'desc';

const TaskList: React.FC<TaskListProps> = ({ tasks, onToggleStatus, onDeleteTask, onCompleteAll }) => {
  const [filter, setFilter] = useState<FilterType>('all');
  const [sortDirection, setSortDirection] = useState<SortDirection>('desc');
  const [filteredTasks, setFilteredTasks] = useState<Task[]>(tasks);
  const [completionPercent, setCompletionPercent] = useState<number>(0);

  // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ñ–∏–ª—å—Ç—Ä–∞ –∏–ª–∏ –∑–∞–¥–∞—á
  useEffect(() => {
    let result = [...tasks];
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä
    if (filter === 'active') {
      result = result.filter(task => !task.completed);
    } else if (filter === 'completed') {
      result = result.filter(task => task.completed);
    }
    
    // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ (–ø–æ id –∏–ª–∏ createdAt, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å)
    result.sort((a, b) => {
      const aDate = a.createdAt ? new Date(a.createdAt).getTime() : 0;
      const bDate = b.createdAt ? new Date(b.createdAt).getTime() : 0;
      
      const aVal = aDate || a.id;
      const bVal = bDate || b.id;
      
      if (sortDirection === 'asc') {
        return String(aVal).localeCompare(String(bVal));
      } else {
        return String(bVal).localeCompare(String(aVal));
      }
    });
    
    setFilteredTasks(result);
    
    // –†–∞—Å—á–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    if (tasks.length > 0) {
      const completed = tasks.filter(task => task.completed).length;
      setCompletionPercent(Math.round((completed / tasks.length) * 100));
    } else {
      setCompletionPercent(0);
    }
  }, [tasks, filter, sortDirection]);

  const handleFilterChange = (newFilter: FilterType) => {
    setFilter(newFilter);
  };

  const toggleSortDirection = () => {
    setSortDirection(prev => prev === 'asc' ? 'desc' : 'asc');
  };

  if (tasks.length === 0) {
    return (
      <div className={styles.emptyMessage}>
        <div className={styles.emptyIcon}>üìù</div>
        <p>–ó–∞–¥–∞—á –ø–æ–∫–∞ –Ω–µ—Ç. –î–æ–±–∞–≤—å—Ç–µ –≤–∞—à—É –ø–µ—Ä–≤—É—é –∑–∞–¥–∞—á—É!</p>
      </div>
    );
  }

  return (
    <div className={styles.taskList}>
      {/* –ü–æ–ª–æ—Å–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ */}
      <div className="progress-container">
        <div className="progress-bar-bg">
          <div 
            className="progress-bar" 
            style={{ width: `${completionPercent}%` }}
          ></div>
        </div>
        <div className="progress-text">
          <span>–í—ã–ø–æ–ª–Ω–µ–Ω–æ: {completionPercent}%</span>
          <span>{tasks.filter(task => task.completed).length} –∏–∑ {tasks.length}</span>
        </div>
      </div>

      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–æ —Å–ø–∏—Å–∫–æ–º —Ñ–∏–ª—å—Ç—Ä–æ–≤ */}
      <div className={styles.listHeader}>
        <div className={styles.listTitle}>
          –ú–æ–∏ –∑–∞–¥–∞—á–∏
        </div>
        
        <div className={styles.filters}>
          <button 
            className={`${styles.filterButton} ${filter === 'all' ? styles.filterButtonActive : ''}`}
            onClick={() => handleFilterChange('all')}
          >
            –í—Å–µ
          </button>
          <button 
            className={`${styles.filterButton} ${filter === 'active' ? styles.filterButtonActive : ''}`}
            onClick={() => handleFilterChange('active')}
          >
            –ê–∫—Ç–∏–≤–Ω—ã–µ
          </button>
          <button 
            className={`${styles.filterButton} ${filter === 'completed' ? styles.filterButtonActive : ''}`}
            onClick={() => handleFilterChange('completed')}
          >
            –ó–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ
          </button>
          
          <button 
            className={styles.sortButton + ' ' + (sortDirection === 'asc' ? styles.sortButtonAsc : styles.sortButtonDesc)}
            onClick={toggleSortDirection}
          >
            <svg width="14" height="14" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
              <path d="M7 14l5-5 5 5" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
            </svg>
            –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
          </button>
        </div>
      </div>

      {/* –ö–Ω–æ–ø–∫–∞ "–ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—Å–µ" –µ—Å–ª–∏ –µ—Å—Ç—å –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –∏ —Ñ—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–¥–∞–Ω–∞ */}
      {onCompleteAll && tasks.some(task => !task.completed) && (
        <button 
          className={styles.completeAllButton}
          onClick={onCompleteAll}
        >
          <svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path d="M5 13l4 4L19 7" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
          </svg>
          –ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏
        </button>
      )}

      <div className={styles.tasksContainer}>
        {filteredTasks.map((task, index) => (
          <TaskItem
            key={task.id}
            task={task}
            onToggleStatus={onToggleStatus}
            onDeleteTask={onDeleteTask}
            index={index}
          />
        ))}
      </div>
    </div>
  );
};

export default TaskList;